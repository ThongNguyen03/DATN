<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
<!-- Bootstrap CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">

<!-- jQuery -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<!-- Bootstrap JS Bundle with Popper -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title - Medinet</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    <style>
        .header {
            background-color: #ffffff;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            padding: 10px 20px;
        }

        .header-container {
            display: flex;
            align-items: center;
            justify-content: space-between;
            max-width: 100%;
            width: 80%;
            margin: 0 auto;
        }

        .logo-container img {
            height: 40px;
        }

        .search-container {
            flex-grow: 1;
            margin: 0 20px;
            max-width: 100%;
            width: 100%;
        }

        .search-form {
            display: flex;
            position: relative;
            max-width: 100%;
            width: 100%;
        }

        .search-input {
            max-width: 100%;
            width: 100%;
            padding: 10px 40px 10px 15px;
            border: 1px solid #ddd;
            border-radius: 10px;
            margin-top: 14px;
        }

        .search-button {
            position: absolute;
            right: 5px;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            color: #888;
            margin-top: 8px;
        }

        .header-icons {
            display: flex;
            gap: 15px;
        }

        .icon-button {
            color: #333;
            font-size: 20px;
            position: relative;
        }

        .user-avatar-image {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
        }

        .cart-container {
            position: relative;
            display: inline-block;
        }

        .cart-badge {
            position: absolute;
            top: -8px;
            right: -8px;
            background-color: #dc3545;
            color: white;
            border-radius: 50%;
            min-width: 18px;
            height: 18px;
            font-size: 11px;
            font-weight: bold;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 2px;
        }

        .notification-container {
            position: relative;
            display: inline-block;
        }

        #notification-badge {
            position: absolute;
            top: -8px;
            right: -8px;
            background-color: #dc3545;
            color: white;
            border-radius: 50%;
            min-width: 18px;
            height: 18px;
            font-size: 11px;
            font-weight: bold;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 2px;
        }
        .notification-content {
            max-height: 400px;
            overflow-y: auto;
            padding: 0;
            scrollbar-width: thin; /* Firefox */
        }

            /* Tùy chỉnh scrollbar cho Chrome/Safari/Edge */
            .notification-content::-webkit-scrollbar {
                width: 5px;
            }

            .notification-content::-webkit-scrollbar-track {
                background: #f1f1f1;
            }

            .notification-content::-webkit-scrollbar-thumb {
                background: #888;
                border-radius: 10px;
            }

                .notification-content::-webkit-scrollbar-thumb:hover {
                    background: #555;
                }
        /* Notification Popup Styles */
        .notification-popup {
            position: absolute;
            top: 45px;
            right: -150px;
            width: 360px;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            z-index: 1000;
            display: none;
            overflow: hidden;
        }

            .notification-popup.show {
                display: block;
            }

        .notification-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 16px;
            border-bottom: 1px solid #eee;
            background-color: #f8f9fa;
        }

            .notification-header h5 {
                margin: 0;
                font-weight: 600;
                font-size: 15px;
                color: #333;
            }

            .notification-header a {
                color: #666;
                font-size: 16px;
                cursor: pointer;
                padding: 4px;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                width: 28px;
                height: 28px;
                transition: background-color 0.2s;
            }

                .notification-header a:hover {
                    background-color: #e9ecef;
                }

        /* Notification Items */
        .notification-item {
            padding: 12px 16px;
            border-bottom: 1px solid #f0f0f0;
            cursor: pointer;
            transition: background-color 0.15s;
        }

            .notification-item:hover {
                background-color: #f8f9fa;
            }

            .notification-item.unread {
                background-color: #f2f8ff;
            }

                .notification-item.unread:hover {
                    background-color: #e8f3ff;
                }

            .notification-item.important {
                border-left: 3px solid #dc3545;
            }

        .notification-title {
            font-weight: 600;
            font-size: 14px;
            margin-bottom: 4px;
            color: #333;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .notification-message {
            font-size: 13px;
            color: #666;
            margin-bottom: 6px;
            line-height: 1.4;
        }

        .notification-time {
            font-size: 12px;
            color: #888;
            text-align: right;
        }

        .notification-badge {
            display: inline-block;
            padding: 3px 8px;
            width: 80px;
            border-radius: 4px;
            font-size: 10px;
            font-weight: 600;
            color: white;
            margin-left: 6px;
        }

        .notification-footer {
            padding: 10px 16px;
            text-align: center;
            border-top: 1px solid #eee;
            background-color: #f8f9fa;
        }

            .notification-footer a {
                color: #0d6efd;
                font-size: 13px;
                text-decoration: none;
                font-weight: 500;
            }

                .notification-footer a:hover {
                    text-decoration: underline;
                }

        /* No notifications message */
        .no-notifications {
            padding: 30px 20px;
            text-align: center;
            color: #888;
        }
        /* Xóa bỏ đường viền đỏ bên trái cho thông báo quan trọng */
        .notification-item.important {
            border-left: none; /* Loại bỏ viền bên trái */
        }
        .centered-text {
            text-align: center;
        }
    </style>
</head>
<body>
    <!--</nav>-->
    <header class="header">
        <div class="header-container">
            <div class="logo-container">
                @{
                    var vaitro = Session["VaiTro"];
                    switch (vaitro)
                    {
                        case "Buyer":
                            <a href="@Url.Action("Index", "Home")" class="logo">
                                <img src="~/Content/images/medinet-logo.png" alt="Logo" />
                            </a>
                            break;
                        default:
                            <a href="#" class="logo">
                                <img src="~/Content/images/medinet-logo.png" alt="Logo" />
                            </a>
                            break;
                    }
                }
            </div>

            <!-- Thay thế phần form tìm kiếm trong _Layout.cshtml -->
            @{
                var vaitrotimkiem = Session["VaiTro"];
                if (vaitrotimkiem != null && vaitrotimkiem.ToString() == "Buyer")
                {
                    <div class="search-container">
                        <form action="@Url.Action("SanPham", "Home")" method="get" class="search-form">
                            <input type="text"
                                   name="timKiem"
                                   placeholder="Hôm nay bạn đang tìm gì?"
                                   class="search-input" />
                            <button type="submit" class="search-button">
                                <i class="fa fa-search"></i>
                            </button>
                        </form>
                    </div>
                }
            }

        <div class="header-icons">
            <!-- Thay thế phần thông báo hiện tại -->
            <div class="notification-container">
                @{
                    var userRoleForNotif = Session["VaiTro"] as string;
                    if (userRoleForNotif == "Buyer")
                    {
                        <!-- Người mua: chuyển hướng đến trang thông báo -->
                        <a href="@Url.Action("Index", "ThongBao")" class="icon-button">
                            <img src="~/Content/images/notification.png" alt="Thông báo" />
                        </a>
                    }
                    else
                    {
                        <!-- Người bán và Admin: hiển thị popup -->
                        <a href="javascript:void(0);" class="icon-button" id="notification-icon">
                            <img src="~/Content/images/notification.png" alt="Thông báo" />
                        </a>


                    }
                }
                <!-- Badge hiển thị số lượng thông báo chưa đọc -->
                <span id="notification-badge" class="notifi-badge" style="display: none;">0</span>
                <div class="notification-popup" id="notification-popup">
                    <div class="notification-header">
                        <h5>Thông báo của bạn</h5>
                        <div class="d-flex align-items-center">
                            <a href="javascript:void(0);" id="mark-all-read" class="me-2" title="Đánh dấu tất cả đã đọc">
                                <i class="fas fa-check-double"></i>
                            </a>
                            <a href="javascript:void(0);" id="close-notification">
                                <i class="fas fa-times"></i>
                            </a>
                        </div>
                    </div>
                    <div class="notification-content" id="notification-list">
                        <!-- Loading spinner -->
                        <div class="text-center p-3">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Đang tải...</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Phần còn lại của header-icons giữ nguyên -->

            @{
                var vaitrobuyer = Session["VaiTro"];
                if (vaitrobuyer != null && vaitrobuyer.ToString() == "Buyer")
                {
                    <div class="cart-container">
                        <a href="@Url.Action("Index", "GioHangs")" class="icon-button">
                            <img src="~/Content/images/cart.png" alt="Giỏ hàng" />
                        </a>
                        @if (Session["SoLuongGioHang"] != null && Convert.ToInt32(Session["SoLuongGioHang"]) > 0)
                        {
                            <span class="cart-badge">@Session["SoLuongGioHang"]</span>
                        }
                    </div>
                }
            }

            @if (User.Identity.IsAuthenticated)
            {
                var avatarPath = Session["AnhDaiDien"] as string;
                var userRole = Session["VaiTro"] as string;
                string profileUrl = "";

                // Sử dụng switch-case để xử lý các trường hợp vai trò khác nhau
                switch (userRole)
                {
                    case "Seller":
                        profileUrl = Url.Action("EditSellerProfile", "NguoiDungs");
                        break;
                    case "Buyer":
                        profileUrl = Url.Action("Profile", "NguoiDungs");
                        break;
                    default:
                        profileUrl = Url.Action("DangNhap", "DangNhap");
                        break;
                }
                <a href="@profileUrl" class="icon-button">
                    @if (!string.IsNullOrEmpty(avatarPath))
                    {
                        <img src="@Url.Content(avatarPath.ToString())" alt="Avatar của @User.Identity.Name" class="user-avatar-image" />
                    }
                    else
                    {
                        <img src="~/Content/Images/default-avatar.png" alt="Avatar của @User.Identity.Name" class="user-avatar-image" />
                    }
                </a>
            }
            else
            {
                // Người dùng chưa đăng nhập
                <a href="@Url.Action("DangNhap", "DangNhap")" class="icon-button">
                    <img src="~/Content/Images/default-avatar.png" alt="Đăng nhập" class="user-avatar-image" />
                </a>
            }
        </div>
        </div>
    </header>
    <div class="container body-content">
        @RenderBody()
        <hr />
        <footer>
            <p>&copy; @DateTime.Now.Year - Medinet</p>
        </footer>
    </div>

    <script type="text/javascript">
    // Biến lưu số lượng thông báo cuối cùng để so sánh
    var lastNotificationCount = 0;

    // Hàm lấy số lượng thông báo mới
    function checkNewNotifications() {
        $.ajax({
            url: '@Url.Action("GetUnreadNotificationCount", "ThongBao")',
            type: 'GET',
            dataType: 'json',
            success: function (data) {
                // Chỉ hiển thị và cập nhật nếu có thông báo mới
                if (data.count > 0) {
                    $('#notification-badge').text(data.count).show();

                    // Nếu số lượng thông báo tăng lên, hiển thị thông báo nhỏ
                    if (data.count > lastNotificationCount) {
                        // Tùy chọn: Thông báo cho người dùng có thông báo mới
                        // Ví dụ: toast hoặc thông báo nhỏ
                    }
                } else {
                    $('#notification-badge').hide();
                }

                // Cập nhật số lượng thông báo cuối cùng
                lastNotificationCount = data.count;
            },
            error: function (error) {
                console.log('Lỗi khi kiểm tra thông báo mới:', error);
            }
        });
    }

        // Hàm tải danh sách thông báo cho popup
        function loadNotifications() {
            $.ajax({
                url: '@Url.Action("GetAllNotifications", "ThongBao")',
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    var notificationList = $('#notification-list');
                    notificationList.empty();

                    if (data.length === 0) {
                        notificationList.html('<div class="no-notifications"><i class="far fa-bell-slash"></i><p>Bạn chưa có thông báo nào</p></div>');
                        return;
                    }

                    // Hiển thị tất cả thông báo
                    $.each(data, function(index, notification) {
                        var unreadClass = notification.TrangThai === 'Chưa đọc' ? 'unread' : '';
                        var importantClass = notification.MucDoQuanTrong === 2 ? 'important' : '';

                        var badgeHtml = '';
                        switch(notification.LoaiThongBao) {
                            case 'DonHang':
                                badgeHtml = '<span class="notification-badge centered-text" style="background-color: #0d6efd;">Đơn hàng</span>';
                                break;
                            case 'Vi':
                                badgeHtml = '<span class="notification-badge centered-text" style="background-color: #198754;">Ví</span>';
                                break;
                            case 'ThanhToan':
                                badgeHtml = '<span class="notification-badge centered-text" style="background-color: #0dcaf0;">Thanh toán</span>';
                                break;
                            case 'KhuyenMai':
                                badgeHtml = '<span class="notification-badge centered-text" style="background-color: #fd7e14;">Khuyến mãi</span>';
                                break;
                            default:
                                badgeHtml = '<span class="notification-badge centered-text" style="background-color: #6c757d;">Thông báo</span>';
                                break;
                        }

                        // Xử lý thời gian
                        var timeAgo = notification.NgayTao ? getTimeAgo(notification.NgayTao) : "Không xác định";

                        // Lưu cả DuongDanChiTiet vào data attribute để sử dụng khi click
                        var html = '<div class="notification-item ' + unreadClass + ' ' + importantClass + '" data-id="' + notification.MaThongBao + '" data-url="' + (notification.DuongDanChiTiet || '') + '">' +
                            '<div class="notification-title">' + notification.TieuDe + ' ' + badgeHtml + '</div>' +
                            '<div class="notification-message">' + notification.TinNhan + '</div>' +
                            '<div class="notification-time">' + timeAgo + '</div>' +
                            '</div>';

                        notificationList.append(html);
                    });

                    // Thêm sự kiện click cho mỗi thông báo
                    $('.notification-item').click(function() {
                        var notificationId = $(this).data('id');
                        var directUrl = $(this).data('url');

                        // Đánh dấu thông báo là đã đọc
                        $.ajax({
                            url: '@Url.Action("MarkAsRead", "ThongBao")/' + notificationId,
                            type: 'POST',
                            success: function() {
                                // Nếu có đường dẫn chi tiết, chuyển hướng đến đó
                                if (directUrl && directUrl !== '') {
                                    window.location.href = directUrl;
                                } else {
                                    // Nếu không, chuyển đến trang chi tiết thông báo
                                    window.location.href = '@Url.Action("ChiTiet", "ThongBao")/' + notificationId;
                                }
                            },
                            error: function() {
                                // Vẫn chuyển hướng ngay cả khi có lỗi
                                if (directUrl && directUrl !== '') {
                                    window.location.href = directUrl;
                                } else {
                                    window.location.href = '@Url.Action("ChiTiet", "ThongBao")/' + notificationId;
                                }
                            }
                        });
                    });
                },
                error: function (error) {
                    console.log('Lỗi khi tải thông báo:', error);
                    $('#notification-list').html('<div class="text-center p-3">Đã xảy ra lỗi khi tải thông báo</div>');
                }
            });
        }

        // Thêm hàm này vào phần script của bạn
        function setupNotificationPopup() {
            // Toggle notification popup
            $('#notification-icon').click(function (e) {
                e.stopPropagation();
                const popup = $('#notification-popup');

                if (popup.hasClass('show')) {
                    popup.removeClass('show');
                } else {
                    popup.addClass('show');
                    // Load notifications when opened
                    loadNotifications();
                }
            });

            // Close notification popup
            $('#close-notification').click(function () {
                $('#notification-popup').removeClass('show');
            });

            // Close when clicking outside
            $(document).click(function (e) {
                if (!$(e.target).closest('.notification-container').length) {
                    $('#notification-popup').removeClass('show');
                }
            });
        }
        // Helper function: format thời gian
        function getTimeAgo(dateStr) {
            try {
                // Kiểm tra xem dateStr có phải là chuỗi không
                if (typeof dateStr !== 'string') {
                    console.log("Kiểu dữ liệu ngày không phải chuỗi:", typeof dateStr, dateStr);
                    return "Không xác định";
                }

                // Kiểm tra nếu chuỗi có dạng "/Date(1234567890000)/"
                if (dateStr.includes("/Date(")) {
                    // Trích xuất timestamp từ chuỗi JSON .NET
                    var timestamp = parseInt(dateStr.replace(/\/Date\((\d+)(?:[-+]\d+)?\)\//g, "$1"));
                    var date = new Date(timestamp);
                    if (isNaN(date.getTime())) {
                        console.log("Không thể chuyển đổi timestamp:", timestamp);
                        return "Không xác định";
                    }
                } else {
                    // Thử chuyển đổi trực tiếp
                    var date = new Date(dateStr);
                    if (isNaN(date.getTime())) {
                        console.log("Không thể chuyển đổi chuỗi ngày:", dateStr);
                        return "Không xác định";
                    }
                }

                const now = new Date();
                const seconds = Math.floor((now - date) / 1000);

                // Hiển thị thời gian chính xác
                if (seconds < 60) {
                    return seconds + " giây trước";
                }

                let interval = Math.floor(seconds / 60);
                if (interval < 60) {
                    return interval + " phút trước";
                }

                interval = Math.floor(seconds / 3600);
                if (interval < 24) {
                    return interval + " giờ trước";
                }

                // Nếu quá 24 giờ, hiển thị ngày giờ cụ thể
                const day = date.getDate().toString().padStart(2, '0');
                const month = (date.getMonth() + 1).toString().padStart(2, '0');
                const year = date.getFullYear();
                const hours = date.getHours().toString().padStart(2, '0');
                const minutes = date.getMinutes().toString().padStart(2, '0');

                return `${day}/${month}/${year} ${hours}:${minutes}`;
            } catch (e) {
                console.error("Lỗi xử lý thời gian:", e);
                return "Không xác định";
            }
        }
    // Kiểm tra ngay khi trang tải xong
    $(document).ready(function () {
        if (@User.Identity.IsAuthenticated.ToString().ToLower()) {
            // Chỉ kiểm tra nếu người dùng đã đăng nhập
            checkNewNotifications();

            // Kiểm tra mỗi 30 giây
            setInterval(checkNewNotifications, 30000);

            // Thiết lập sự kiện cho popup
            setupNotificationPopup();
        }
    });



    // Thêm hàm xử lý đánh dấu tất cả thông báo đã đọc
function markAllAsRead() {
    $.ajax({
        url: '@Url.Action("MarkAllAsRead", "ThongBao")',
        type: 'POST',
        dataType: 'json',
        success: function(response) {
            if (response.success) {
                // Cập nhật giao diện: loại bỏ lớp unread từ tất cả thông báo
                $('.notification-item').removeClass('unread');

                // Ẩn badge thông báo
                $('#notification-badge').hide();

                // Đặt lại số lượng thông báo chưa đọc
                lastNotificationCount = 0;

                // Hiển thị thông báo thành công (tùy chọn)
                // Ví dụ: hiển thị một thông báo nhỏ
                showToast('Đã đánh dấu tất cả thông báo là đã đọc');
            } else {
                console.error('Lỗi khi đánh dấu tất cả thông báo đã đọc:', response.message);
            }
        },
        error: function(error) {
            console.error('Lỗi khi đánh dấu tất cả thông báo đã đọc:', error);
        }
    });
}

// Hàm hiển thị thông báo toast nhỏ (tùy chọn)
function showToast(message) {
    // Kiểm tra nếu đã có toast, xóa đi
    $('.toast-notification').remove();

    // Tạo toast mới
    var toast = $('<div class="toast-notification" style="position: fixed; bottom: 20px; right: 20px; background-color: #198754; color: white; padding: 10px 15px; border-radius: 4px; box-shadow: 0 2px 10px rgba(0,0,0,0.2); z-index: 9999;">' + message + '</div>');

    // Thêm vào body
    $('body').append(toast);

    // Tự động ẩn sau 3 giây
    setTimeout(function() {
        toast.fadeOut(300, function() {
            $(this).remove();
        });
    }, 3000);
}

// Thêm vào phần setupNotificationPopup
function setupNotificationPopup() {
    // Toggle notification popup
    $('#notification-icon').click(function (e) {
        e.stopPropagation();
        const popup = $('#notification-popup');

        if (popup.hasClass('show')) {
            popup.removeClass('show');
        } else {
            popup.addClass('show');
            // Load notifications when opened
            loadNotifications();
        }
    });

    // Close notification popup
    $('#close-notification').click(function () {
        $('#notification-popup').removeClass('show');
    });

    // Thêm xử lý sự kiện cho nút đánh dấu tất cả đã đọc
    $('#mark-all-read').click(function(e) {
        e.stopPropagation();
        markAllAsRead();
    });

    // Close when clicking outside
    $(document).click(function (e) {
        if (!$(e.target).closest('.notification-container').length) {
            $('#notification-popup').removeClass('show');
        }
    });
}
    </script>
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)
</body>
</html>